# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XfwZiG95r-UK5FETRmG-N7Nft_zPz-AO
"""

!pip install yfinance prophet --quiet
import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller
from prophet import Prophet
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

import warnings
warnings.filterwarnings('ignore')

data = yf.download("^NSEI", start="2015-01-01", end="2024-12-31")
data = data[['Close']]
data.dropna(inplace=True)
data.tail()

plt.figure(figsize=(12, 5))
plt.plot(data['Close'])
plt.title('NIFTY50 Closing Price')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.grid()
plt.show()

adf_result = adfuller(data['Close'])
print(f"ADF Statistic: {adf_result[0]}")
print(f"p-value: {adf_result[1]}")

data['SMA_10'] = data['Close'].rolling(window=10).mean()
data['SMA_50'] = data['Close'].rolling(window=50).mean()

def compute_RSI(data, window=14):
    diff = data.diff(1).dropna()
    gain = diff.where(diff > 0, 0)
    loss = -diff.where(diff < 0, 0)
    avg_gain = gain.rolling(window).mean()
    avg_loss = loss.rolling(window).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

data['RSI'] = compute_RSI(data['Close'])



scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(data[['Close']])

sequence_length = 60
X, y = [], []

for i in range(sequence_length, len(data_scaled)):
    X.append(data_scaled[i-sequence_length:i])
    y.append(data_scaled[i])

X, y = np.array(X), np.array(y)

train_size = int(len(X)*0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

model_lstm = Sequential()
model_lstm.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model_lstm.add(LSTM(units=50))
model_lstm.add(Dense(1))
model_lstm.compile(optimizer='adam', loss='mean_squared_error')

model_lstm.fit(X_train, y_train, epochs=10, batch_size=32)

predicted = model_lstm.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted)

real = scaler.inverse_transform(y_test.reshape(-1, 1))

plt.figure(figsize=(10, 5))
plt.plot(real, color='blue', label='Actual Price')
plt.plot(predicted_prices, color='red', label='Predicted Price')
plt.title('NIFTY50 Forecast with LSTM')
plt.legend()
plt.show()

from sklearn.metrics import mean_squared_error, mean_absolute_error

rmse = np.sqrt(mean_squared_error(real, predicted_prices))
mae = mean_absolute_error(real, predicted_prices)

print(f"RMSE: {rmse}")
print(f"MAE: {mae}")

import pandas as pd
import yfinance as yf

# Download NIFTY50 data
data = yf.download("^NSEI", start="2015-01-01", end="2024-12-31")
data = data[['Close']].dropna()

# Feature Engineering: SMA and RSI
data['SMA_10'] = data['Close'].rolling(window=10).mean()
data['SMA_50'] = data['Close'].rolling(window=50).mean()

def compute_RSI(series, window=14):
    diff = series.diff(1).dropna()
    gain = diff.where(diff > 0, 0)
    loss = -diff.where(diff < 0, 0)
    avg_gain = gain.rolling(window).mean()
    avg_loss = loss.rolling(window).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

data['RSI'] = compute_RSI(data['Close'])

data_cleaned = data.dropna()

data_cleaned.to_excel("NIFTY50_Cleaned_Data.xlsx")
print("✅ Excel file saved as NIFTY50_Cleaned_Data.xlsx")

from google.colab import files
files.download("NIFTY50_Cleaned_Data.xlsx")

pip install streamlit yfinance prophet

import streamlit as st
import pandas as pd
import yfinance as yf
from prophet import Prophet
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")

st.title("📈 NIFTY50 Demand Forecast Dashboard")

st.sidebar.header("User Input")
start_date = st.sidebar.date_input("Start Date", pd.to_datetime("2018-01-01"))
end_date = st.sidebar.date_input("End Date", pd.to_datetime("2024-12-31"))

@st.cache_data
def load_data():
    data = yf.download("^NSEI", start=start_date, end=end_date)
    data.reset_index(inplace=True)
    return data

data_load_state = st.text("Loading data...")
df = load_data()
data_load_state.text("✅ Data loaded!")

if st.checkbox("Show raw data"):
    st.write(df.tail())

df_prophet = df[["Date", "Close"]]
df_prophet.columns = ['ds', 'y']

model = Prophet(daily_seasonality=True)
model.fit(df_prophet)

future = model.make_future_dataframe(periods=180)
forecast = model.predict(future)

st.subheader("📉 Forecast Plot")
fig1 = model.plot(forecast)
st.pyplot(fig1)

st.subheader("🔍 Forecast Components")
fig2 = model.plot_components(forecast)
st.pyplot(fig2)

!pip install streamlit yfinance prophet